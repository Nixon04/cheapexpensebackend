<?php

namespace App\Models {

   /**
    * App\Models\Admin
    *
    * @property \Illuminate\Support\Carbon $updated_at
    * @property \Illuminate\Support\Carbon $created_at
    * @property string $password
    * @property string $email
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereEmail($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin wherePassword($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class Admin extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\AdsShow
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $message
    * @property string $image
    * @property string $title_frame
    * @property string $title
    * @property string $ad_id
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<AdsShow>|AdsShow whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AdsShow>|AdsShow whereAdId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AdsShow>|AdsShow whereTitle($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AdsShow>|AdsShow whereTitleFrame($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AdsShow>|AdsShow whereImage($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AdsShow>|AdsShow whereMessage($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AdsShow>|AdsShow whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AdsShow>|AdsShow whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AdsShow>|AdsShow newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<AdsShow>|AdsShow newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<AdsShow>|AdsShow query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class AdsShow extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\AirtimeToCash
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $instructions
    * @property string $warrant
    * @property string $status
    * @property string $package_number
    * @property string $bill_type
    * @property string $amount
    * @property string $username
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash whereUsername($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash whereAmount($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash whereBillType($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash wherePackageNumber($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash whereStatus($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash whereWarrant($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash whereInstructions($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<AirtimeToCash>|AirtimeToCash query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class AirtimeToCash extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\AllDataPackage
    *
    * @method static \Illuminate\Database\Eloquent\Builder<AllDataPackage>|AllDataPackage newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<AllDataPackage>|AllDataPackage newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<AllDataPackage>|AllDataPackage query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class AllDataPackage extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\AllServices
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $status
    * @property string $service_name
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<AllServices>|AllServices whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AllServices>|AllServices whereServiceName($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AllServices>|AllServices whereStatus($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AllServices>|AllServices whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AllServices>|AllServices whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AllServices>|AllServices newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<AllServices>|AllServices newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<AllServices>|AllServices query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class AllServices extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\AppControlPanelVersion
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $last_updated
    * @property string $statement_approved
    * @property string $status
    * @property string $version
    * @property string $name
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<AppControlPanelVersion>|AppControlPanelVersion whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AppControlPanelVersion>|AppControlPanelVersion whereName($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AppControlPanelVersion>|AppControlPanelVersion whereVersion($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AppControlPanelVersion>|AppControlPanelVersion whereStatus($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AppControlPanelVersion>|AppControlPanelVersion whereStatementApproved($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AppControlPanelVersion>|AppControlPanelVersion whereLastUpdated($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AppControlPanelVersion>|AppControlPanelVersion whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AppControlPanelVersion>|AppControlPanelVersion whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<AppControlPanelVersion>|AppControlPanelVersion newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<AppControlPanelVersion>|AppControlPanelVersion newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<AppControlPanelVersion>|AppControlPanelVersion query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class AppControlPanelVersion extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\BankList
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $bank_image
    * @property string $bank_name
    * @property string $bank_id
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<BankList>|BankList whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<BankList>|BankList whereBankId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<BankList>|BankList whereBankName($value)
    * @method static \Illuminate\Database\Eloquent\Builder<BankList>|BankList whereBankImage($value)
    * @method static \Illuminate\Database\Eloquent\Builder<BankList>|BankList whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<BankList>|BankList whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<BankList>|BankList newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<BankList>|BankList newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<BankList>|BankList query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class BankList extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\CablePackages
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $calculated_price
    * @property string $fixed_price
    * @property string $variation_amount
    * @property string $variation_code
    * @property string $variation_name
    * @property string $packagename
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages wherePackagename($value)
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages whereVariationName($value)
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages whereVariationCode($value)
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages whereVariationAmount($value)
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages whereFixedPrice($value)
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages whereCalculatedPrice($value)
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<CablePackages>|CablePackages query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class CablePackages extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\ClearCurrentIdNotification
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $status
    * @property string $notification_id
    * @property string $username
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<ClearCurrentIdNotification>|ClearCurrentIdNotification whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<ClearCurrentIdNotification>|ClearCurrentIdNotification whereUsername($value)
    * @method static \Illuminate\Database\Eloquent\Builder<ClearCurrentIdNotification>|ClearCurrentIdNotification whereNotificationId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<ClearCurrentIdNotification>|ClearCurrentIdNotification whereStatus($value)
    * @method static \Illuminate\Database\Eloquent\Builder<ClearCurrentIdNotification>|ClearCurrentIdNotification whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<ClearCurrentIdNotification>|ClearCurrentIdNotification whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<ClearCurrentIdNotification>|ClearCurrentIdNotification newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<ClearCurrentIdNotification>|ClearCurrentIdNotification newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<ClearCurrentIdNotification>|ClearCurrentIdNotification query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class ClearCurrentIdNotification extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\ClearNotification
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $status
    * @property string $username
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<ClearNotification>|ClearNotification whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<ClearNotification>|ClearNotification whereUsername($value)
    * @method static \Illuminate\Database\Eloquent\Builder<ClearNotification>|ClearNotification whereStatus($value)
    * @method static \Illuminate\Database\Eloquent\Builder<ClearNotification>|ClearNotification whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<ClearNotification>|ClearNotification whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<ClearNotification>|ClearNotification newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<ClearNotification>|ClearNotification newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<ClearNotification>|ClearNotification query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class ClearNotification extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\DataBodyPackage
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $packagereference
    * @property string $packagesubname
    * @property string $packagename
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<DataBodyPackage>|DataBodyPackage whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataBodyPackage>|DataBodyPackage wherePackagename($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataBodyPackage>|DataBodyPackage wherePackagesubname($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataBodyPackage>|DataBodyPackage wherePackagereference($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataBodyPackage>|DataBodyPackage whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataBodyPackage>|DataBodyPackage whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataBodyPackage>|DataBodyPackage newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<DataBodyPackage>|DataBodyPackage newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<DataBodyPackage>|DataBodyPackage query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class DataBodyPackage extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\DataPackList
    *
    * @property \Illuminate\Support\Carbon $updated_at
    * @property \Illuminate\Support\Carbon $created_at
    * @property string $current_amount
    * @property string $duration_type
    * @property string $name
    * @property string $amount
    * @property string $alias
    * @property string $plan_code
    * @property string $network
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList whereNetwork($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList wherePlanCode($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList whereAlias($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList whereAmount($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList whereName($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList whereDurationType($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList whereCurrentAmount($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<DataPackList>|DataPackList query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class DataPackList extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\DeactivateAccount
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $status
    * @property string $username
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<DeactivateAccount>|DeactivateAccount whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DeactivateAccount>|DeactivateAccount whereUsername($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DeactivateAccount>|DeactivateAccount whereStatus($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DeactivateAccount>|DeactivateAccount whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DeactivateAccount>|DeactivateAccount whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<DeactivateAccount>|DeactivateAccount newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<DeactivateAccount>|DeactivateAccount newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<DeactivateAccount>|DeactivateAccount query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class DeactivateAccount extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\EligibleForCard
    *
    * @method static \Illuminate\Database\Eloquent\Builder<EligibleForCard>|EligibleForCard newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<EligibleForCard>|EligibleForCard newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<EligibleForCard>|EligibleForCard query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class EligibleForCard extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\NewsFeedModel
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $last_updated
    * @property string $news_message
    * @property string $news_image
    * @property string $news_title
    * @property string $news_ref_id
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<NewsFeedModel>|NewsFeedModel whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NewsFeedModel>|NewsFeedModel whereNewsRefId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NewsFeedModel>|NewsFeedModel whereNewsTitle($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NewsFeedModel>|NewsFeedModel whereNewsImage($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NewsFeedModel>|NewsFeedModel whereNewsMessage($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NewsFeedModel>|NewsFeedModel whereLastUpdated($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NewsFeedModel>|NewsFeedModel whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NewsFeedModel>|NewsFeedModel whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NewsFeedModel>|NewsFeedModel newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<NewsFeedModel>|NewsFeedModel newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<NewsFeedModel>|NewsFeedModel query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class NewsFeedModel extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\NotificationList
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $status_read
    * @property string $last_updated
    * @property string $notification_message
    * @property string $notification_title
    * @property string $notification_id
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationList>|NotificationList whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationList>|NotificationList whereNotificationId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationList>|NotificationList whereNotificationTitle($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationList>|NotificationList whereNotificationMessage($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationList>|NotificationList whereLastUpdated($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationList>|NotificationList whereStatusRead($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationList>|NotificationList whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationList>|NotificationList whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationList>|NotificationList newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationList>|NotificationList newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationList>|NotificationList query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class NotificationList extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\NotificationReg
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $flag
    * @property string $username
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationReg>|NotificationReg whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationReg>|NotificationReg whereUsername($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationReg>|NotificationReg whereFlag($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationReg>|NotificationReg whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationReg>|NotificationReg whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationReg>|NotificationReg newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationReg>|NotificationReg newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<NotificationReg>|NotificationReg query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class NotificationReg extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\PurchaseDataItems
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $networkPackageSpace
    * @property string $networkPlansList
    * @property string $networkPrice
    * @property string $networkCode
    * @property string $networkName
    * @property string $networkId
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems whereNetworkid($value)
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems whereNetworkname($value)
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems whereNetworkcode($value)
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems whereNetworkprice($value)
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems whereNetworkplanslist($value)
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems whereNetworkpackagespace($value)
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<PurchaseDataItems>|PurchaseDataItems query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class PurchaseDataItems extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\Referrals
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $reg_status
    * @property string $reg_date
    * @property string $reg_total
    * @property string $earning_per_referral
    * @property string $reg_link
    * @property string $reg_transact_total
    * @property string $reg_amount
    * @property string $reg_user
    * @property string $username
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereUsername($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereRegUser($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereRegAmount($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereRegTransactTotal($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereRegLink($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereEarningPerReferral($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereRegTotal($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereRegDate($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereRegStatus($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<Referrals>|Referrals query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class Referrals extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\Transactions
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $date_of_purchase
    * @property string $reference
    * @property string $ref_num_purchase
    * @property string $status
    * @property string $data_type
    * @property string $sub_type_purchase
    * @property string $type_of_purchase
    * @property string $amount
    * @property string $username
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereUsername($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereAmount($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereTypeOfPurchase($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereSubTypePurchase($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereDataType($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereStatus($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereRefNumPurchase($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereReference($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereDateOfPurchase($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<Transactions>|Transactions query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class Transactions extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\User
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string|null $remember_token
    * @property string $password
    * @property \Illuminate\Support\Carbon|null $email_verified_at
    * @property string $email
    * @property string $name
    * @property int $id
    * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
    * @property-read int|null $notifications_count
    * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereName($value)
    * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
    * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmailVerifiedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
    * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberToken($value)
    * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class User extends \Illuminate\Foundation\Auth\User
   {
      //
   }

   /**
    * App\Models\UserAccountDetails
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $withdrawer_count
    * @property string $last_update
    * @property string $user_bonus
    * @property string $user_amount
    * @property string $user_ref_id
    * @property string $username
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails whereUsername($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails whereUserRefId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails whereUserAmount($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails whereUserBonus($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails whereLastUpdate($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails whereWithdrawerCount($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<UserAccountDetails>|UserAccountDetails query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class UserAccountDetails extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\UserDetailsForCard
    *
    * @method static \Illuminate\Database\Eloquent\Builder<UserDetailsForCard>|UserDetailsForCard newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<UserDetailsForCard>|UserDetailsForCard newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<UserDetailsForCard>|UserDetailsForCard query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class UserDetailsForCard extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\UserSignup
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $referral_id
    * @property string $fcmtoken
    * @property string $users_id
    * @property string $date
    * @property string $dob
    * @property string $resetcode
    * @property string $profileimage
    * @property string $password
    * @property string $contact
    * @property string $email
    * @property string $username
    * @property string $fullname
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereFullname($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereUsername($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereEmail($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereContact($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup wherePassword($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereProfileimage($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereResetcode($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereDob($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereDate($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereUsersId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereFcmtoken($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereReferralId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<UserSignup>|UserSignup query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class UserSignup extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\UsersBankDetails
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $user_bank
    * @property string $bank_user_name
    * @property string $user_account
    * @property string $bank_name_id
    * @property string $username
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<UsersBankDetails>|UsersBankDetails whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UsersBankDetails>|UsersBankDetails whereUsername($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UsersBankDetails>|UsersBankDetails whereBankNameId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UsersBankDetails>|UsersBankDetails whereUserAccount($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UsersBankDetails>|UsersBankDetails whereBankUserName($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UsersBankDetails>|UsersBankDetails whereUserBank($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UsersBankDetails>|UsersBankDetails whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UsersBankDetails>|UsersBankDetails whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<UsersBankDetails>|UsersBankDetails newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<UsersBankDetails>|UsersBankDetails newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<UsersBankDetails>|UsersBankDetails query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class UsersBankDetails extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\VirtualAccounts
    *
    * @property \Illuminate\Support\Carbon|null $updated_at
    * @property \Illuminate\Support\Carbon|null $created_at
    * @property string $date
    * @property string $current_bank
    * @property string $account_number
    * @property string $account_name
    * @property string $username
    * @property int $id
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualAccounts>|VirtualAccounts whereId($value)
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualAccounts>|VirtualAccounts whereUsername($value)
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualAccounts>|VirtualAccounts whereAccountName($value)
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualAccounts>|VirtualAccounts whereAccountNumber($value)
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualAccounts>|VirtualAccounts whereCurrentBank($value)
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualAccounts>|VirtualAccounts whereDate($value)
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualAccounts>|VirtualAccounts whereCreatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualAccounts>|VirtualAccounts whereUpdatedAt($value)
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualAccounts>|VirtualAccounts newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualAccounts>|VirtualAccounts newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualAccounts>|VirtualAccounts query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class VirtualAccounts extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\VirtualCardAmounts
    *
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualCardAmounts>|VirtualCardAmounts newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualCardAmounts>|VirtualCardAmounts newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualCardAmounts>|VirtualCardAmounts query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class VirtualCardAmounts extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

   /**
    * App\Models\VirtualCardList
    *
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualCardList>|VirtualCardList newModelQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualCardList>|VirtualCardList newQuery()
    * @method static \Illuminate\Database\Eloquent\Builder<VirtualCardList>|VirtualCardList query()
    * @method static mixed select($columns)
    * @method static mixed selectSub($query, $as)
    * @method static mixed selectRaw($expression, array $bindings)
    * @method static mixed fromSub($query, $as)
    * @method static mixed fromRaw($expression, $bindings)
    * @method static mixed createSub($query)
    * @method static mixed parseSub($query)
    * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
    * @method static mixed addSelect($column)
    * @method static mixed distinct()
    * @method static mixed from($table, $as)
    * @method static mixed useIndex($index)
    * @method static mixed forceIndex($index)
    * @method static mixed ignoreIndex($index)
    * @method static mixed join($table, $first, $operator, $second, $type, $where)
    * @method static mixed joinWhere($table, $first, $operator, $second, $type)
    * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
    * @method static mixed joinLateral($query, string $as, string $type)
    * @method static mixed leftJoinLateral($query, string $as)
    * @method static mixed leftJoin($table, $first, $operator, $second)
    * @method static mixed leftJoinWhere($table, $first, $operator, $second)
    * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed rightJoin($table, $first, $operator, $second)
    * @method static mixed rightJoinWhere($table, $first, $operator, $second)
    * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
    * @method static mixed crossJoin($table, $first, $operator, $second)
    * @method static mixed crossJoinSub($query, $as)
    * @method static mixed newJoinClause(self $parentQuery, $type, $table)
    * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
    * @method static mixed mergeWheres($wheres, $bindings)
    * @method static mixed where($column, $operator, $value, $boolean)
    * @method static mixed addArrayOfWheres($column, $boolean, $method)
    * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
    * @method static mixed invalidOperatorAndValue($operator, $value)
    * @method static mixed invalidOperator($operator)
    * @method static mixed isBitwiseOperator($operator)
    * @method static mixed orWhere($column, $operator, $value)
    * @method static mixed whereNot($column, $operator, $value, $boolean)
    * @method static mixed orWhereNot($column, $operator, $value)
    * @method static mixed whereColumn($first, $operator, $second, $boolean)
    * @method static mixed orWhereColumn($first, $operator, $second)
    * @method static mixed whereRaw($sql, $bindings, $boolean)
    * @method static mixed orWhereRaw($sql, $bindings)
    * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
    * @method static mixed orWhereLike($column, $value, $caseSensitive)
    * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
    * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
    * @method static mixed whereIn($column, $values, $boolean, $not)
    * @method static mixed orWhereIn($column, $values)
    * @method static mixed whereNotIn($column, $values, $boolean)
    * @method static mixed orWhereNotIn($column, $values)
    * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
    * @method static mixed orWhereIntegerInRaw($column, $values)
    * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
    * @method static mixed orWhereIntegerNotInRaw($column, $values)
    * @method static mixed whereNull($columns, $boolean, $not)
    * @method static mixed orWhereNull($column)
    * @method static mixed whereNotNull($columns, $boolean)
    * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
    * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
    * @method static mixed orWhereBetween($column, iterable $values)
    * @method static mixed orWhereBetweenColumns($column, array $values)
    * @method static mixed whereNotBetween($column, iterable $values, $boolean)
    * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
    * @method static mixed orWhereNotBetween($column, iterable $values)
    * @method static mixed orWhereNotBetweenColumns($column, array $values)
    * @method static mixed orWhereNotNull($column)
    * @method static mixed whereDate($column, $operator, $value, $boolean)
    * @method static mixed orWhereDate($column, $operator, $value)
    * @method static mixed whereTime($column, $operator, $value, $boolean)
    * @method static mixed orWhereTime($column, $operator, $value)
    * @method static mixed whereDay($column, $operator, $value, $boolean)
    * @method static mixed orWhereDay($column, $operator, $value)
    * @method static mixed whereMonth($column, $operator, $value, $boolean)
    * @method static mixed orWhereMonth($column, $operator, $value)
    * @method static mixed whereYear($column, $operator, $value, $boolean)
    * @method static mixed orWhereYear($column, $operator, $value)
    * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
    * @method static mixed whereNested(Closure $callback, $boolean)
    * @method static mixed forNestedWhere()
    * @method static mixed addNestedWhereQuery($query, $boolean)
    * @method static mixed whereSub($column, $operator, $callback, $boolean)
    * @method static mixed whereExists($callback, $boolean, $not)
    * @method static mixed orWhereExists($callback, $not)
    * @method static mixed whereNotExists($callback, $boolean)
    * @method static mixed orWhereNotExists($callback)
    * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
    * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
    * @method static mixed orWhereRowValues($columns, $operator, $values)
    * @method static mixed whereJsonContains($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonContains($column, $value)
    * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntContain($column, $value)
    * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
    * @method static mixed orWhereJsonOverlaps($column, $value)
    * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
    * @method static mixed orWhereJsonDoesntOverlap($column, $value)
    * @method static mixed whereJsonContainsKey($column, $boolean, $not)
    * @method static mixed orWhereJsonContainsKey($column)
    * @method static mixed whereJsonDoesntContainKey($column, $boolean)
    * @method static mixed orWhereJsonDoesntContainKey($column)
    * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
    * @method static mixed orWhereJsonLength($column, $operator, $value)
    * @method static mixed dynamicWhere($method, $parameters)
    * @method static mixed addDynamic($segment, $connector, $parameters, $index)
    * @method static mixed whereFullText($columns, $value, array $options, $boolean)
    * @method static mixed orWhereFullText($columns, $value, array $options)
    * @method static mixed whereAll($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAll($columns, $operator, $value)
    * @method static mixed whereAny($columns, $operator, $value, $boolean)
    * @method static mixed orWhereAny($columns, $operator, $value)
    * @method static mixed whereNone($columns, $operator, $value, $boolean)
    * @method static mixed orWhereNone($columns, $operator, $value)
    * @method static mixed groupBy($groups)
    * @method static mixed groupByRaw($sql, array $bindings)
    * @method static mixed having($column, $operator, $value, $boolean)
    * @method static mixed orHaving($column, $operator, $value)
    * @method static mixed havingNested(Closure $callback, $boolean)
    * @method static mixed addNestedHavingQuery($query, $boolean)
    * @method static mixed havingNull($columns, $boolean, $not)
    * @method static mixed orHavingNull($column)
    * @method static mixed havingNotNull($columns, $boolean)
    * @method static mixed orHavingNotNull($column)
    * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
    * @method static mixed havingRaw($sql, array $bindings, $boolean)
    * @method static mixed orHavingRaw($sql, array $bindings)
    * @method static mixed orderBy($column, $direction)
    * @method static mixed orderByDesc($column)
    * @method static mixed latest($column)
    * @method static mixed oldest($column)
    * @method static mixed inRandomOrder($seed)
    * @method static mixed orderByRaw($sql, $bindings)
    * @method static mixed skip($value)
    * @method static mixed offset($value)
    * @method static mixed take($value)
    * @method static mixed limit($value)
    * @method static mixed groupLimit($value, $column)
    * @method static mixed forPage($page, $perPage)
    * @method static mixed forPageBeforeId($perPage, $lastId, $column)
    * @method static mixed forPageAfterId($perPage, $lastId, $column)
    * @method static mixed reorder($column, $direction)
    * @method static mixed removeExistingOrdersFor($column)
    * @method static mixed union($query, $all)
    * @method static mixed unionAll($query)
    * @method static mixed lock($value)
    * @method static mixed lockForUpdate()
    * @method static mixed sharedLock()
    * @method static mixed beforeQuery(callable $callback)
    * @method static mixed applyBeforeQueryCallbacks()
    * @method static mixed afterQuery(Closure $callback)
    * @method static mixed applyAfterQueryCallbacks($result)
    * @method static mixed toSql()
    * @method static mixed toRawSql()
    * @method static mixed find($id, $columns)
    * @method static mixed findOr($id, $columns, Closure $callback)
    * @method static mixed value($column)
    * @method static mixed rawValue(string $expression, array $bindings)
    * @method static mixed soleValue($column)
    * @method static mixed get($columns)
    * @method static mixed runSelect()
    * @method static mixed withoutGroupLimitKeys($items)
    * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
    * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
    * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
    * @method static mixed ensureOrderForCursorPagination($shouldReverse)
    * @method static mixed getCountForPagination($columns)
    * @method static mixed runPaginationCountQuery($columns)
    * @method static mixed cloneForPaginationCount()
    * @method static mixed withoutSelectAliases(array $columns)
    * @method static mixed cursor()
    * @method static mixed enforceOrderBy()
    * @method static mixed pluck($column, $key)
    * @method static mixed stripTableForPluck($column)
    * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
    * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
    * @method static mixed implode($column, $glue)
    * @method static mixed exists()
    * @method static mixed doesntExist()
    * @method static mixed existsOr(Closure $callback)
    * @method static mixed doesntExistOr(Closure $callback)
    * @method static mixed count($columns)
    * @method static mixed min($column)
    * @method static mixed max($column)
    * @method static mixed sum($column)
    * @method static mixed avg($column)
    * @method static mixed average($column)
    * @method static mixed aggregate($function, $columns)
    * @method static mixed numericAggregate($function, $columns)
    * @method static mixed setAggregate($function, $columns)
    * @method static mixed onceWithColumns($columns, $callback)
    * @method static mixed insert(array $values)
    * @method static mixed insertOrIgnore(array $values)
    * @method static mixed insertGetId(array $values, $sequence)
    * @method static mixed insertUsing(array $columns, $query)
    * @method static mixed insertOrIgnoreUsing(array $columns, $query)
    * @method static mixed update(array $values)
    * @method static mixed updateFrom(array $values)
    * @method static mixed updateOrInsert(array $attributes, callable|array $values)
    * @method static mixed upsert(array $values, $uniqueBy, $update)
    * @method static mixed increment($column, $amount, array $extra)
    * @method static mixed incrementEach(array $columns, array $extra)
    * @method static mixed decrement($column, $amount, array $extra)
    * @method static mixed decrementEach(array $columns, array $extra)
    * @method static mixed delete($id)
    * @method static mixed truncate()
    * @method static mixed newQuery()
    * @method static mixed forSubQuery()
    * @method static mixed getColumns()
    * @method static mixed raw($value)
    * @method static mixed getUnionBuilders()
    * @method static mixed getBindings()
    * @method static mixed getRawBindings()
    * @method static mixed setBindings(array $bindings, $type)
    * @method static mixed addBinding($value, $type)
    * @method static mixed castBinding($value)
    * @method static mixed mergeBindings(self $query)
    * @method static mixed cleanBindings(array $bindings)
    * @method static mixed flattenValue($value)
    * @method static mixed defaultKeyName()
    * @method static mixed getConnection()
    * @method static mixed getProcessor()
    * @method static mixed getGrammar()
    * @method static mixed useWritePdo()
    * @method static mixed isQueryable($value)
    * @method static mixed clone()
    * @method static mixed cloneWithout(array $properties)
    * @method static mixed cloneWithoutBindings(array $except)
    * @method static mixed dump($args)
    * @method static mixed dumpRawSql()
    * @method static mixed dd()
    * @method static mixed ddRawSql()
    * @method static mixed chunk($count, callable $callback)
    * @method static mixed chunkMap(callable $callback, $count)
    * @method static mixed each(callable $callback, $count)
    * @method static mixed chunkById($count, callable $callback, $column, $alias)
    * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
    * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
    * @method static mixed eachById(callable $callback, $count, $column, $alias)
    * @method static mixed lazy($chunkSize)
    * @method static mixed lazyById($chunkSize, $column, $alias)
    * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
    * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
    * @method static mixed first($columns)
    * @method static mixed firstOrFail($columns, $message)
    * @method static mixed sole($columns)
    * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
    * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
    * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
    * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
    * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
    * @method static mixed tap($callback)
    * @method static mixed when($value, callable $callback, callable $default)
    * @method static mixed unless($value, callable $callback, callable $default)
    * @method static mixed explain()
    * @method static mixed forwardCallTo($object, $method, $parameters)
    * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
    * @method static mixed throwBadMethodCallException($method)
    * @method static mixed macro($name, $macro)
    * @method static mixed mixin($mixin, $replace)
    * @method static mixed hasMacro($name)
    * @method static mixed flushMacros()
    * @method static mixed macroCall($method, $parameters)
    * @mixin \Illuminate\Database\Query\Builder
    */
   class VirtualCardList extends \Illuminate\Database\Eloquent\Model
   {
      //
   }

}